{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOLtha0bJXq6bxWKVNGo5H7"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# **Linear Regression :**\n","Building Linear regression model"],"metadata":{"id":"H260nEU0IP2d"}},{"cell_type":"code","source":["#importing the libraries\n","import numpy as np\n"],"metadata":{"id":"yiQd6EE9IYz7","executionInfo":{"status":"ok","timestamp":1675175119976,"user_tz":-330,"elapsed":450,"user":{"displayName":"Jay Barode","userId":"13781167781472862626"}}},"execution_count":35,"outputs":[]},{"cell_type":"code","source":["class Linear_Regression():\n","\n","  def __init__(self,learning_rate, no_of_iteration):\n","\n","    self.learning_rate = learning_rate\n","    self.no_of_iteration = no_of_iteration\n","\n","\n","  def fit(self,X,Y ):\n","    # number of training examples & no. of features \n","    self.m, self.n = X.shape #No. of rows and columns\n","\n","    #initialising weight and bias\n","    self.w = np.zeros(self.n)\n","    self.b = 0\n","    self.X = X\n","    self.Y = Y\n","\n","    #implementing Gradient Descent\n","    for i in range(self.no_of_iteration):\n","      self.update_weights()\n","      \n","  def update_weights(self, ):\n","\n","    Y_prediction =self.predict(self.X)\n","\n","    #Calculate gradient\n","    dw = (-2*(self.X.T).dot(self.Y - Y_prediction)) / self.m\n","\n","    db = -2*np.sum(self.Y - Y_prediction)/self.m\n","\n","    #updating the weights\n","\n","    self.w = self.w - self.learning_rate*dw\n","    self.b = self.b - self.learning_rate*db \n","\n","  def predict(self, X):\n","    return X.dot(self.w) + self.b "],"metadata":{"id":"CEZ8t-GEItJ1","executionInfo":{"status":"ok","timestamp":1675175120458,"user_tz":-330,"elapsed":33,"user":{"displayName":"Jay Barode","userId":"13781167781472862626"}}},"execution_count":36,"outputs":[]},{"cell_type":"markdown","source":["Implementing Linear regression model"],"metadata":{"id":"88LtCgYc4Cfs"}},{"cell_type":"code","source":["#importing the dependencies:\n","import pandas as pd\n","from sklearn.model_selection import train_test_split\n","import matplotlib.pyplot as plt"],"metadata":{"id":"FIT3DW35ItL8","executionInfo":{"status":"ok","timestamp":1675175120462,"user_tz":-330,"elapsed":35,"user":{"displayName":"Jay Barode","userId":"13781167781472862626"}}},"execution_count":37,"outputs":[]},{"cell_type":"markdown","source":["Data Preprocessing"],"metadata":{"id":"SnBZzVju4mwi"}},{"cell_type":"code","source":["#loading the data from csv file to pandas.dataframe\n","salary_data = pd.read_csv('/content/salary_data.csv')"],"metadata":{"id":"qNapW40OItSy","executionInfo":{"status":"ok","timestamp":1675175120464,"user_tz":-330,"elapsed":35,"user":{"displayName":"Jay Barode","userId":"13781167781472862626"}}},"execution_count":38,"outputs":[]},{"cell_type":"code","source":["salary_data.head()"],"metadata":{"id":"J2WD7kDRItWK","colab":{"base_uri":"https://localhost:8080/","height":206},"executionInfo":{"status":"ok","timestamp":1675175121493,"user_tz":-330,"elapsed":1062,"user":{"displayName":"Jay Barode","userId":"13781167781472862626"}},"outputId":"f547c60b-a858-400f-bb20-75128faa7222"},"execution_count":39,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   YearsExperience  Salary\n","0              1.1   39343\n","1              1.3   46205\n","2              1.5   37731\n","3              2.0   43525\n","4              2.2   39891"],"text/html":["\n","  <div id=\"df-cb3cb417-c23b-485b-a854-ad3102a9e407\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>YearsExperience</th>\n","      <th>Salary</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1.1</td>\n","      <td>39343</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1.3</td>\n","      <td>46205</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1.5</td>\n","      <td>37731</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2.0</td>\n","      <td>43525</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2.2</td>\n","      <td>39891</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-cb3cb417-c23b-485b-a854-ad3102a9e407')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-cb3cb417-c23b-485b-a854-ad3102a9e407 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-cb3cb417-c23b-485b-a854-ad3102a9e407');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":39}]},{"cell_type":"code","source":["salary_data.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4OtRbnL8uUK1","executionInfo":{"status":"ok","timestamp":1675175121495,"user_tz":-330,"elapsed":61,"user":{"displayName":"Jay Barode","userId":"13781167781472862626"}},"outputId":"77e8de4d-f297-4931-b3d9-51af09e0cf2c"},"execution_count":40,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(30, 2)"]},"metadata":{},"execution_count":40}]},{"cell_type":"code","source":["#Checking the missing values\n","salary_data.isnull().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"46gNe_rHueR5","executionInfo":{"status":"ok","timestamp":1675175121497,"user_tz":-330,"elapsed":51,"user":{"displayName":"Jay Barode","userId":"13781167781472862626"}},"outputId":"de0ed0e2-9dd6-4b5f-a4b6-dd8b5d665470"},"execution_count":41,"outputs":[{"output_type":"execute_result","data":{"text/plain":["YearsExperience    0\n","Salary             0\n","dtype: int64"]},"metadata":{},"execution_count":41}]},{"cell_type":"markdown","source":["Spliting the feature and target"],"metadata":{"id":"TdBPoLNDuxA9"}},{"cell_type":"code","source":["X = salary_data.iloc[:,:-1].values\n","Y = salary_data.iloc[:,1].values"],"metadata":{"id":"vAVQ-fk2ustg","executionInfo":{"status":"ok","timestamp":1675175121498,"user_tz":-330,"elapsed":47,"user":{"displayName":"Jay Barode","userId":"13781167781472862626"}}},"execution_count":42,"outputs":[]},{"cell_type":"code","source":["print(X)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TV5zsxq3vKsp","executionInfo":{"status":"ok","timestamp":1675175121499,"user_tz":-330,"elapsed":46,"user":{"displayName":"Jay Barode","userId":"13781167781472862626"}},"outputId":"cb9af271-717b-4724-8203-340954cba823"},"execution_count":43,"outputs":[{"output_type":"stream","name":"stdout","text":["[[ 1.1]\n"," [ 1.3]\n"," [ 1.5]\n"," [ 2. ]\n"," [ 2.2]\n"," [ 2.9]\n"," [ 3. ]\n"," [ 3.2]\n"," [ 3.2]\n"," [ 3.7]\n"," [ 3.9]\n"," [ 4. ]\n"," [ 4. ]\n"," [ 4.1]\n"," [ 4.5]\n"," [ 4.9]\n"," [ 5.1]\n"," [ 5.3]\n"," [ 5.9]\n"," [ 6. ]\n"," [ 6.8]\n"," [ 7.1]\n"," [ 7.9]\n"," [ 8.2]\n"," [ 8.7]\n"," [ 9. ]\n"," [ 9.5]\n"," [ 9.6]\n"," [10.3]\n"," [10.5]]\n"]}]},{"cell_type":"code","source":["print(Y)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gqcYfhjFvNIh","executionInfo":{"status":"ok","timestamp":1675175121500,"user_tz":-330,"elapsed":42,"user":{"displayName":"Jay Barode","userId":"13781167781472862626"}},"outputId":"59faf541-c79e-4b13-caeb-1d00d7fade0c"},"execution_count":44,"outputs":[{"output_type":"stream","name":"stdout","text":["[ 39343  46205  37731  43525  39891  56642  60150  54445  64445  57189\n","  63218  55794  56957  57081  61111  67938  66029  83088  81363  93940\n","  91738  98273 101302 113812 109431 105582 116969 112635 122391 121872]\n"]}]},{"cell_type":"markdown","source":["Splitting the dataset into training and test data"],"metadata":{"id":"IdFHiyvWvzuG"}},{"cell_type":"code","source":["X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size = 0.33, random_state = 2)"],"metadata":{"id":"b2R_vju-vcah","executionInfo":{"status":"ok","timestamp":1675175121502,"user_tz":-330,"elapsed":40,"user":{"displayName":"Jay Barode","userId":"13781167781472862626"}}},"execution_count":45,"outputs":[]},{"cell_type":"markdown","source":["Training the Linear Regression model\n"],"metadata":{"id":"SFnsTyClxQMb"}},{"cell_type":"code","source":["model = Linear_Regression(learning_rate = 0.02, no_of_iteration=1000)"],"metadata":{"id":"nS6UJeqAwMDw","executionInfo":{"status":"ok","timestamp":1675175121504,"user_tz":-330,"elapsed":41,"user":{"displayName":"Jay Barode","userId":"13781167781472862626"}}},"execution_count":46,"outputs":[]},{"cell_type":"code","source":["model.fit(X_train, Y_train)"],"metadata":{"id":"uj0-MQ05x0VA","executionInfo":{"status":"ok","timestamp":1675175121505,"user_tz":-330,"elapsed":41,"user":{"displayName":"Jay Barode","userId":"13781167781472862626"}}},"execution_count":47,"outputs":[]},{"cell_type":"code","source":["#printing the parameter value (weight and bias)\n","print('Weight = ', model.w[0])\n","print('Bias =', model.b)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zC4qyIgkx0Ri","executionInfo":{"status":"ok","timestamp":1675175121506,"user_tz":-330,"elapsed":41,"user":{"displayName":"Jay Barode","userId":"13781167781472862626"}},"outputId":"40eb4118-a119-4690-9ef8-f0851f7a536d"},"execution_count":48,"outputs":[{"output_type":"stream","name":"stdout","text":["Weight =  9514.400999035135\n","Bias = 23697.406507136307\n"]}]},{"cell_type":"markdown","source":["y = 9514(x) +23697\n","\n","salary = 9514(experience) + 23697\n","\n","\n","\n","Predict the salary value for test data"],"metadata":{"id":"DB96UpX80bum"}},{"cell_type":"code","source":["test_data_prediction = model.predict(X_test)\n"],"metadata":{"id":"-Y-YfhzEx0PQ","executionInfo":{"status":"ok","timestamp":1675175121510,"user_tz":-330,"elapsed":39,"user":{"displayName":"Jay Barode","userId":"13781167781472862626"}}},"execution_count":49,"outputs":[]},{"cell_type":"code","source":["print(test_data_prediction)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XSz7wQZox0KP","executionInfo":{"status":"ok","timestamp":1675175121512,"user_tz":-330,"elapsed":41,"user":{"displayName":"Jay Barode","userId":"13781167781472862626"}},"outputId":"9b07c7ac-6c92-406e-d086-10472acbd6f0"},"execution_count":50,"outputs":[{"output_type":"stream","name":"stdout","text":["[ 36066.12780588  34163.24760607  66512.21100279  58900.69020357\n","  91249.65360029  80783.81250135 101715.49469922  52240.60950424\n","  42726.20850521  88395.33330058]\n"]}]},{"cell_type":"markdown","source":["Visualising the predicted values & actual values"],"metadata":{"id":"M_HR9igb1Lag"}},{"cell_type":"code","source":["plt.scatter(X_test, Y_test, color = 'red')\n","plt.plot(X_test, test_data_prediction, color = 'blue')\n","plt.xlabel('Work Experience')\n","plt.ylabel('Salary')\n","plt.title('Salary vs Experience')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":295},"id":"OROeH3GY1Fva","executionInfo":{"status":"ok","timestamp":1675175121515,"user_tz":-330,"elapsed":39,"user":{"displayName":"Jay Barode","userId":"13781167781472862626"}},"outputId":"acefec77-af51-41da-d00a-d434fb988168"},"execution_count":51,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":[],"metadata":{"id":"6b6GjRBN1sVR","executionInfo":{"status":"ok","timestamp":1675175121516,"user_tz":-330,"elapsed":37,"user":{"displayName":"Jay Barode","userId":"13781167781472862626"}}},"execution_count":51,"outputs":[]}]}